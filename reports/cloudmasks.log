Traceback (most recent call last):
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
data = {k: load_cloudmask_dataset(v) for k, v in cat_cloudmask.items()}
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mClientResponseError[0m                       Traceback (most recent call last)
[0;32m/tmp/ipykernel_6316/3883556282.py[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mdata[0m [0;34m=[0m [0;34m{[0m[0mk[0m[0;34m:[0m [0mload_cloudmask_dataset[0m[0;34m([0m[0mv[0m[0;34m)[0m [0;32mfor[0m [0mk[0m[0;34m,[0m [0mv[0m [0;32min[0m [0mcat_cloudmask[0m[0;34m.[0m[0mitems[0m[0;34m([0m[0;34m)[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/tmp/ipykernel_6316/3883556282.py[0m in [0;36m<dictcomp>[0;34m(.0)[0m
[0;32m----> 1[0;31m [0mdata[0m [0;34m=[0m [0;34m{[0m[0mk[0m[0;34m:[0m [0mload_cloudmask_dataset[0m[0;34m([0m[0mv[0m[0;34m)[0m [0;32mfor[0m [0mk[0m[0;34m,[0m [0mv[0m [0;32min[0m [0mcat_cloudmask[0m[0;34m.[0m[0mitems[0m[0;34m([0m[0;34m)[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/tmp/ipykernel_6316/3204722144.py[0m in [0;36mload_cloudmask_dataset[0;34m(cat_item)[0m
[1;32m     37[0m     [0;31m# load in parallel as this function is mainly limited by the network roundtrip time[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     38[0m     [0mp[0m [0;34m=[0m [0mThreadPool[0m[0;34m([0m[0;36m20[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 39[0;31m     return ensure_cfminmax(xr.concat(list(p.map(lambda v: v.get().to_dask().chunk(),
[0m[1;32m     40[0m                                                 cat_item.values())),
[1;32m     41[0m                                      dim="time"))

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/multiprocessing/pool.py[0m in [0;36mmap[0;34m(self, func, iterable, chunksize)[0m
[1;32m    362[0m         [0;32min[0m [0ma[0m [0mlist[0m [0mthat[0m [0;32mis[0m [0mreturned[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    363[0m         '''
[0;32m--> 364[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_map_async[0m[0;34m([0m[0mfunc[0m[0;34m,[0m [0miterable[0m[0;34m,[0m [0mmapstar[0m[0;34m,[0m [0mchunksize[0m[0;34m)[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    365[0m [0;34m[0m[0m
[1;32m    366[0m     [0;32mdef[0m [0mstarmap[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mfunc[0m[0;34m,[0m [0miterable[0m[0;34m,[0m [0mchunksize[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/multiprocessing/pool.py[0m in [0;36mget[0;34m(self, timeout)[0m
[1;32m    769[0m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_value[0m[0;34m[0m[0;34m[0m[0m
[1;32m    770[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 771[0;31m             [0;32mraise[0m [0mself[0m[0;34m.[0m[0m_value[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    772[0m [0;34m[0m[0m
[1;32m    773[0m     [0;32mdef[0m [0m_set[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mi[0m[0;34m,[0m [0mobj[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/multiprocessing/pool.py[0m in [0;36mworker[0;34m(inqueue, outqueue, initializer, initargs, maxtasks, wrap_exception)[0m
[1;32m    123[0m         [0mjob[0m[0;34m,[0m [0mi[0m[0;34m,[0m [0mfunc[0m[0;34m,[0m [0margs[0m[0;34m,[0m [0mkwds[0m [0;34m=[0m [0mtask[0m[0;34m[0m[0;34m[0m[0m
[1;32m    124[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 125[0;31m             [0mresult[0m [0;34m=[0m [0;34m([0m[0;32mTrue[0m[0;34m,[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    126[0m         [0;32mexcept[0m [0mException[0m [0;32mas[0m [0me[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    127[0m             [0;32mif[0m [0mwrap_exception[0m [0;32mand[0m [0mfunc[0m [0;32mis[0m [0;32mnot[0m [0m_helper_reraises_exception[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/multiprocessing/pool.py[0m in [0;36mmapstar[0;34m(args)[0m
[1;32m     46[0m [0;34m[0m[0m
[1;32m     47[0m [0;32mdef[0m [0mmapstar[0m[0;34m([0m[0margs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 48[0;31m     [0;32mreturn[0m [0mlist[0m[0;34m([0m[0mmap[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     49[0m [0;34m[0m[0m
[1;32m     50[0m [0;32mdef[0m [0mstarmapstar[0m[0;34m([0m[0margs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/tmp/ipykernel_6316/3204722144.py[0m in [0;36m<lambda>[0;34m(v)[0m
[1;32m     37[0m     [0;31m# load in parallel as this function is mainly limited by the network roundtrip time[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     38[0m     [0mp[0m [0;34m=[0m [0mThreadPool[0m[0;34m([0m[0;36m20[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 39[0;31m     return ensure_cfminmax(xr.concat(list(p.map(lambda v: v.get().to_dask().chunk(),
[0m[1;32m     40[0m                                                 cat_item.values())),
[1;32m     41[0m                                      dim="time"))

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/base.py[0m in [0;36mto_dask[0;34m(self)[0m
[1;32m     67[0m     [0;32mdef[0m [0mto_dask[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     68[0m         [0;34m"""Return xarray object where variables are dask arrays"""[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 69[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mread_chunked[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     70[0m [0;34m[0m[0m
[1;32m     71[0m     [0;32mdef[0m [0mclose[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/base.py[0m in [0;36mread_chunked[0;34m(self)[0m
[1;32m     42[0m     [0;32mdef[0m [0mread_chunked[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     43[0m         [0;34m"""Return xarray object (which will have chunks)"""[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 44[0;31m         [0mself[0m[0;34m.[0m[0m_load_metadata[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     45[0m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_ds[0m[0;34m[0m[0;34m[0m[0m
[1;32m     46[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake/source/base.py[0m in [0;36m_load_metadata[0;34m(self)[0m
[1;32m    234[0m         [0;34m"""load metadata only if needed"""[0m[0;34m[0m[0;34m[0m[0m
[1;32m    235[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_schema[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 236[0;31m             [0mself[0m[0;34m.[0m[0m_schema[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_get_schema[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    237[0m             [0mself[0m[0;34m.[0m[0mdtype[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_schema[0m[0;34m.[0m[0mdtype[0m[0;34m[0m[0;34m[0m[0m
[1;32m    238[0m             [0mself[0m[0;34m.[0m[0mshape[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_schema[0m[0;34m.[0m[0mshape[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/base.py[0m in [0;36m_get_schema[0;34m(self)[0m
[1;32m     16[0m [0;34m[0m[0m
[1;32m     17[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_ds[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 18[0;31m             [0mself[0m[0;34m.[0m[0m_open_dataset[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     19[0m [0;34m[0m[0m
[1;32m     20[0m             metadata = {

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/xzarr.py[0m in [0;36m_open_dataset[0;34m(self)[0m
[1;32m     44[0m             [0mself[0m[0;34m.[0m[0m_ds[0m [0;34m=[0m [0mxr[0m[0;34m.[0m[0mopen_mfdataset[0m[0;34m([0m[0mself[0m[0;34m.[0m[0murlpath[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     45[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 46[0;31m             [0mself[0m[0;34m.[0m[0m_ds[0m [0;34m=[0m [0mxr[0m[0;34m.[0m[0mopen_dataset[0m[0;34m([0m[0mself[0m[0;34m.[0m[0murlpath[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     47[0m [0;34m[0m[0m
[1;32m     48[0m     [0;32mdef[0m [0mclose[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/xarray/backends/api.py[0m in [0;36mopen_dataset[0;34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, backend_kwargs, *args, **kwargs)[0m
[1;32m    493[0m [0;34m[0m[0m
[1;32m    494[0m     [0moverwrite_encoded_chunks[0m [0;34m=[0m [0mkwargs[0m[0;34m.[0m[0mpop[0m[0;34m([0m[0;34m"overwrite_encoded_chunks"[0m[0;34m,[0m [0;32mNone[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 495[0;31m     backend_ds = backend.open_dataset(
[0m[1;32m    496[0m         [0mfilename_or_obj[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    497[0m         [0mdrop_variables[0m[0;34m=[0m[0mdrop_variables[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/xarray/backends/zarr.py[0m in [0;36mopen_dataset[0;34m(self, filename_or_obj, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, use_cftime, decode_timedelta, group, mode, synchronizer, consolidated, chunk_store, storage_options, stacklevel)[0m
[1;32m    798[0m [0;34m[0m[0m
[1;32m    799[0m         [0mfilename_or_obj[0m [0;34m=[0m [0m_normalize_path[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 800[0;31m         store = ZarrStore.open_group(
[0m[1;32m    801[0m             [0mfilename_or_obj[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    802[0m             [0mgroup[0m[0;34m=[0m[0mgroup[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/xarray/backends/zarr.py[0m in [0;36mopen_group[0;34m(cls, store, mode, synchronizer, group, consolidated, consolidate_on_close, chunk_store, storage_options, append_dim, write_region, safe_chunks, stacklevel)[0m
[1;32m    366[0m         [0;32melif[0m [0mconsolidated[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    367[0m             [0;31m# TODO: an option to pass the metadata_key keyword[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 368[0;31m             [0mzarr_group[0m [0;34m=[0m [0mzarr[0m[0;34m.[0m[0mopen_consolidated[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0;34m**[0m[0mopen_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    369[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    370[0m             [0mzarr_group[0m [0;34m=[0m [0mzarr[0m[0;34m.[0m[0mopen_group[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0;34m**[0m[0mopen_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/zarr/convenience.py[0m in [0;36mopen_consolidated[0;34m(store, metadata_key, mode, **kwargs)[0m
[1;32m   1179[0m [0;34m[0m[0m
[1;32m   1180[0m     [0;31m# normalize parameters[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1181[0;31m     [0mstore[0m [0;34m=[0m [0mnormalize_store_arg[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0mstorage_options[0m[0;34m=[0m[0mkwargs[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m"storage_options"[0m[0;34m)[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0mmode[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1182[0m     [0;32mif[0m [0mmode[0m [0;32mnot[0m [0;32min[0m [0;34m{[0m[0;34m'r'[0m[0;34m,[0m [0;34m'r+'[0m[0;34m}[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1183[0m         raise ValueError("invalid mode, expected either 'r' or 'r+'; found {!r}"

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/zarr/storage.py[0m in [0;36mnormalize_store_arg[0;34m(store, storage_options, mode)[0m
[1;32m    112[0m     [0;32mif[0m [0misinstance[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0mstr[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    113[0m         [0;32mif[0m [0;34m"://"[0m [0;32min[0m [0mstore[0m [0;32mor[0m [0;34m"::"[0m [0;32min[0m [0mstore[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 114[0;31m             [0;32mreturn[0m [0mFSStore[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0mmode[0m[0;34m,[0m [0;34m**[0m[0;34m([0m[0mstorage_options[0m [0;32mor[0m [0;34m{[0m[0;34m}[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    115[0m         [0;32melif[0m [0mstorage_options[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    116[0m             [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m"storage_options passed with non-fsspec path"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/zarr/storage.py[0m in [0;36m__init__[0;34m(self, url, normalize_keys, key_separator, mode, exceptions, dimension_separator, **storage_options)[0m
[1;32m   1138[0m         [0;31m# Pass attributes to array creation[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1139[0m         [0mself[0m[0;34m.[0m[0m_dimension_separator[0m [0;34m=[0m [0mdimension_separator[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1140[0;31m         [0;32mif[0m [0mself[0m[0;34m.[0m[0mfs[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mpath[0m[0;34m)[0m [0;32mand[0m [0;32mnot[0m [0mself[0m[0;34m.[0m[0mfs[0m[0;34m.[0m[0misdir[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mpath[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1141[0m             [0;32mraise[0m [0mFSPathExistNotDir[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1142[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m     83[0m     [0;32mdef[0m [0mwrapper[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     84[0m         [0mself[0m [0;34m=[0m [0mobj[0m [0;32mor[0m [0margs[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 85[0;31m         [0;32mreturn[0m [0msync[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mloop[0m[0;34m,[0m [0mfunc[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     86[0m [0;34m[0m[0m
[1;32m     87[0m     [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36msync[0;34m(loop, func, timeout, *args, **kwargs)[0m
[1;32m     63[0m         [0;32mraise[0m [0mFSTimeoutError[0m [0;32mfrom[0m [0mreturn_result[0m[0;34m[0m[0;34m[0m[0m
[1;32m     64[0m     [0;32melif[0m [0misinstance[0m[0;34m([0m[0mreturn_result[0m[0;34m,[0m [0mBaseException[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 65[0;31m         [0;32mraise[0m [0mreturn_result[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     66[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     67[0m         [0;32mreturn[0m [0mreturn_result[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36m_runner[0;34m(event, coro, result, timeout)[0m
[1;32m     23[0m         [0mcoro[0m [0;34m=[0m [0masyncio[0m[0;34m.[0m[0mwait_for[0m[0;34m([0m[0mcoro[0m[0;34m,[0m [0mtimeout[0m[0;34m=[0m[0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     24[0m     [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 25[0;31m         [0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m=[0m [0;32mawait[0m [0mcoro[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     26[0m     [0;32mexcept[0m [0mException[0m [0;32mas[0m [0mex[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     27[0m         [0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m=[0m [0mex[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36m_isdir[0;34m(self, path)[0m
[1;32m    530[0m     [0;32masync[0m [0;32mdef[0m [0m_isdir[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mpath[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    531[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 532[0;31m             [0;32mreturn[0m [0;34m([0m[0;32mawait[0m [0mself[0m[0;34m.[0m[0m_info[0m[0;34m([0m[0mpath[0m[0;34m)[0m[0;34m)[0m[0;34m[[0m[0;34m"type"[0m[0;34m][0m [0;34m==[0m [0;34m"directory"[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    533[0m         [0;32mexcept[0m [0mIOError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    534[0m             [0;32mreturn[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/ipfsspec/async_ipfs.py[0m in [0;36m_info[0;34m(self, path, **kwargs)[0m
[1;32m    318[0m         [0mpath[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_strip_protocol[0m[0;34m([0m[0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    319[0m         [0msession[0m [0;34m=[0m [0;32mawait[0m [0mself[0m[0;34m.[0m[0mset_session[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 320[0;31m         [0;32mreturn[0m [0;32mawait[0m [0mself[0m[0;34m.[0m[0mgateway[0m[0;34m.[0m[0mfile_info[0m[0;34m([0m[0mpath[0m[0;34m,[0m [0msession[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    321[0m [0;34m[0m[0m
[1;32m    322[0m     [0;32mdef[0m [0mopen[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mpath[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0;34m"rb"[0m[0;34m,[0m [0mblock_size[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0mcache_options[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/ipfsspec/async_ipfs.py[0m in [0;36mfile_info[0;34m(self, path, session)[0m
[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32masync[0m [0;32mwith[0m [0mres[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 36[0;31m             [0mself[0m[0;34m.[0m[0m_raise_not_found_for_status[0m[0;34m([0m[0mres[0m[0;34m,[0m [0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     37[0m             [0;32mif[0m [0mres[0m[0;34m.[0m[0mstatus[0m [0;34m!=[0m [0;36m200[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     38[0m                 [0;31m# TODO: maybe handle 301 here[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/ipfsspec/async_ipfs.py[0m in [0;36m_raise_not_found_for_status[0;34m(self, response, url)[0m
[1;32m     84[0m         [0;32melif[0m [0mresponse[0m[0;34m.[0m[0mstatus[0m [0;34m==[0m [0;36m400[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     85[0m             [0;32mraise[0m [0mFileNotFoundError[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 86[0;31m         [0mresponse[0m[0;34m.[0m[0mraise_for_status[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     87[0m [0;34m[0m[0m
[1;32m     88[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/aiohttp/client_reqrep.py[0m in [0;36mraise_for_status[0;34m(self)[0m
[1;32m   1002[0m             [0;32massert[0m [0mself[0m[0;34m.[0m[0mreason[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1003[0m             [0mself[0m[0;34m.[0m[0mrelease[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1004[0;31m             raise ClientResponseError(
[0m[1;32m   1005[0m                 [0mself[0m[0;34m.[0m[0mrequest_info[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1006[0m                 [0mself[0m[0;34m.[0m[0mhistory[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;31mClientResponseError[0m: 503, message='Service Unavailable', url=URL('https://cloudflare-ipfs.com/ipfs/QmaWLxcBDxufNK5C55xQX77HjQkjfmQcbPKf2FyiSbi7oK')
ClientResponseError: 503, message='Service Unavailable', url=URL('https://cloudflare-ipfs.com/ipfs/QmaWLxcBDxufNK5C55xQX77HjQkjfmQcbPKf2FyiSbi7oK')

